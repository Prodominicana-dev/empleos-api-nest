generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id               Int          @id @default(autoincrement())
  category         String?
  registrationDate DateTime?
  jobOpening       JobOpening[]
}

model Document {
  id               Int           @id @default(autoincrement())
  idSubscription   Int?
  name             String?
  size             String?
  registrationDate DateTime?
  subscription     Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Education {
  id                  Int           @id @default(autoincrement())
  idSubscription      Int?
  academicPreparation String?
  institution         String?
  fieldStudy          String?
  degreeAwarded       String?
  studyStatus         String?
  issueDate           String?
  startStudy          String?
  endStudy            String?
  registrationDate    DateTime?
  subscription        Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model WorkExperience {
  id                           Int           @id @default(autoincrement())
  idSubscription               Int?
  startDate                    String?
  endDate                      String?
  companyName                  String?
  position                     String?
  salary                       String?
  jobArea                      String?
  industry                     String?
  supervisor                   String?
  responsibilitiesAchievements String?
  phoneNumber                  String?
  registrationDate             DateTime?
  subscription                 Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Training {
  id                Int           @id @default(autoincrement())
  idSubscription    Int?
  certificate       String?
  startDate         String?
  endDate           String?
  certificateStatus String?
  level             String?
  registrationDate  DateTime?
  subscription      Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Language {
  id                 Int           @id @default(autoincrement())
  idSubscription     Int?
  language           String?
  institutionName    String?
  conversationLevel  String?
  readingLevel       String?
  writingLevel       String?
  translationAbility String?
  level              String?
  registrationDate   DateTime?
  subscription       Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ProfilePicture {
  id               Int           @id @default(autoincrement())
  idSubscription   Int?
  name             String?
  registrationDate DateTime?
  subscription     Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Profile {
  id                   Int           @id @default(autoincrement())
  idSubscription       Int?
  name                 String?
  lastName             String?
  email                String?
  mobile               String?
  landline             String?
  countryBirth         String?
  nationality          String?
  sex                  String?
  birthDate            String?
  documentType         String?
  documentNumber       String?
  civilStatus          String?
  province             String?
  driverLicense        String?
  ownsVehicle          String?
  relationship         String?
  relationshipName     String?
  relationshipLandline String?
  relationshipWork     String?
  salaryDesired        String?
  Question             String?
  relationshipQuestion String?
  registrationDate     DateTime?
  subscription         Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Period {
  id               Int         @id @default(autoincrement())
  idJobOpening     Int?
  status           String?
  registrationDate DateTime?
  jobOpening       JobOpening? @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ProfessionalReferences {
  id               Int           @id @default(autoincrement())
  idSubscription   Int?
  fullName         String?
  landline         String?
  profession       String?
  relationship     String?
  registrationDate DateTime?
  subscription     Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model PersonalReferences {
  id               Int           @id @default(autoincrement())
  idSubscription   Int?
  fullName         String?
  landline         String?
  occupation       String?
  registrationDate DateTime?
  subscription     Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Subscription {
  id                       Int                        @id @default(autoincrement())
  name                     String?
  email                    String?
  password                 String?
  registrationDate         DateTime?
  documet                  Document[]
  education                Education[]
  workExperience           WorkExperience[]
  training                 Training[]
  language                 Language[]
  profile                  Profile[]
  professionalReferences   ProfessionalReferences[]
  personalReferences       PersonalReferences[]
  positionAppliedFor       PositionAppliedFor[]
  profilePicture           ProfilePicture[]
  profileAnswer            ProfileAnswer[]
  languageAnswer           LanguageAnswer[]
  knowledgeAnswer          KnowledgeAnswer[]
  profileParticularsAnswer ProfileParticularsAnswer[]
}

model User {
  id               Int       @id @default(autoincrement())
  fullName         String?
  email            String?
  password         String?
  registrationDate DateTime?
}

model PositionAppliedFor {
  id               Int           @id @default(autoincrement())
  idSubscription   Int?
  idJobOpening     Int?
  status           String?
  registrationDate DateTime?
  subscription     Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
  jobOpening       JobOpening?   @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model JobOpening {
  id                       Int                        @id @default(autoincrement())
  idCategory               Int?
  name                     String?
  responsibilities         String?
  profile                  String?
  status                   String?
  registrationDate         DateTime?
  positionAppliedFor       PositionAppliedFor[]
  period                   Period[]
  languageAssessment       LanguageAssessment[]
  profileAssessment        ProfileAssessment[]
  knowledgeAssessment      KnowledgeAssessment[]
  profileParticulars       ProfileParticulars[]
  profileAnswer            ProfileAnswer[]
  languageAnswer           LanguageAnswer[]
  knowledgeAnswer          KnowledgeAnswer[]
  profileParticularsAnswer ProfileParticularsAnswer[]
  category                 Category?                  @relation(fields: [idCategory], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//.............................................................

model ProfileAssessment {
  id               Int         @id @default(autoincrement())
  idJobOpening     Int?
  sex              String?
  edad             String?
  workExperience   String?
  education        String?
  registrationDate DateTime?
  jobOpening       JobOpening? @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LanguageAssessment {
  id               Int         @id @default(autoincrement())
  idJobOpening     Int?
  language         String?
  answerLan        String?
  registrationDate DateTime?
  jobOpening       JobOpening? @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model KnowledgeAssessment {
  id               Int         @id @default(autoincrement())
  idJobOpening     Int?
  knowledge        String?
  answerKnow       String?
  registrationDate DateTime?
  jobOpening       JobOpening? @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ProfileParticulars {
  id               Int         @id @default(autoincrement())
  idJobOpening     Int?
  ask              String?
  answerProf       String?
  registrationDate DateTime?
  jobOpening       JobOpening? @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//..............................................................
model ProfileAnswer {
  id                       Int           @id @default(autoincrement())
  idJobOpening             Int?
  idSubscription           Int?
  sex                      String?
  edad                     String?
  workExperience           String?
  education                String?
  sexAssessment            String?
  edadAssessment           String?
  workExperienceAssessment String?
  educationAssessment      String?
  status                   String?
  registrationDate         DateTime?
  jobOpening               JobOpening?   @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription             Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model LanguageAnswer {
  id                       Int           @id @default(autoincrement())
  idJobOpening             Int?
  idSubscription           Int?
  language                 String?
  answerLanguage           String?
  answerLanguageAssessment String?
  status                   String?
  registrationDate         DateTime?
  jobOpening               JobOpening?   @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription             Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model KnowledgeAnswer {
  id                        Int           @id @default(autoincrement())
  idJobOpening              Int?
  idSubscription            Int?
  knowledge                 String?
  answerKnowledge           String?
  answerKnowledgeAssessment String?
  status                    String?
  registrationDate          DateTime?
  jobOpening                JobOpening?   @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription              Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model ProfileParticularsAnswer {
  id                                 Int           @id @default(autoincrement())
  idJobOpening                       Int?
  idSubscription                     Int?
  ask                                String?
  answerProfileParticulars           String?
  answerProfileParticularsAssessment String?
  status                             String?
  registrationDate                   DateTime?
  jobOpening                         JobOpening?   @relation(fields: [idJobOpening], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subscription                       Subscription? @relation(fields: [idSubscription], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
